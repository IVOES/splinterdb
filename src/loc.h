/*
** ****************************************************************************
** loc.h
**
** WARNING: this is a generated file. Any change you make here will be overwritten!
**
** This file was generated by processing all source files under
**     /Users/agurajada/Code/splinterdb/
**
** Script executed: /Users/agurajada/Projects/LOC-Take2/./gen_filenames_defines.py
** ****************************************************************************
*/

//clang-format off
#ifndef __LOC_H__

#include "loc_tokens.h"

#define LOC_NBITS_FILES 15     // # of bits for file-index component.
#define LOC_NBITS_LINES 16     // # of bits for line-number component.
#define LOC__MASK_FILES 07fff  // 32767: Mask to extract file-index component.
#define LOC__MASK_LINES 0ffff  // 65535: Mask to extract line-number component.

typedef uint32 loc_t;

/* Encode a (file-index, line-number) into a loc_t value */
#define __LOC__ (loc_t) ((LOC_FILE_INDEX << LOC_NBITS_FILES) | __LINE__)

/* Extract file-index from an encoded loc_t value */
#define LOC_FILE_TOKEN(v) ((v) >> LOC_NBITS_FILES)

/* External reference to lookup array defined in loc_filenames.c */
extern const char *Loc_FileNamesList [];

/* Safe-accessor at index 'i' from string-lookup array, 'lt', of size 'n'. */
#define LOC__SAFE_LOOKUP(lt, i, n) \n    ((((i) >= 0) && ((i) < (n))) ? (lt)[(i)] : (const char *) "")

/* Extract file-name from an encoded loc_t value */
#define LOC_FILE(v) LOC__SAFE_LOOKUP(Loc_FileNamesList, LOC_FILE_TOKEN(v), LOC_NUM_FILES)

/* Extract line-number from an encoded loc_t value */
#define LOC_LINE(v) ((v) & LOC__MASK_LINES)

//clang-format off
#endif  /* __LOC_H__ */
