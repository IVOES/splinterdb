/* automatically generated by rust-bindgen 0.63.0 */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
pub type int32 = i32;
pub type uint32 = u32;
pub type uint64 = u64;
pub type bool_ = int32;
pub type platform_log_handle = FILE;
extern "C" {
    pub fn platform_set_log_streams(
        info_stream: *mut platform_log_handle,
        error_stream: *mut platform_log_handle,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slice {
    pub length: uint64,
    pub data: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_slice() {
    const UNINIT: ::std::mem::MaybeUninit<slice> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<slice>(),
        16usize,
        concat!("Size of: ", stringify!(slice))
    );
    assert_eq!(
        ::std::mem::align_of::<slice>(),
        8usize,
        concat!("Alignment of ", stringify!(slice))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slice),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(slice),
            "::",
            stringify!(data)
        )
    );
}
pub const message_type_MESSAGE_TYPE_INVALID: message_type = 0;
pub const message_type_MESSAGE_TYPE_INSERT: message_type = 1;
pub const message_type_MESSAGE_TYPE_UPDATE: message_type = 2;
pub const message_type_MESSAGE_TYPE_DELETE: message_type = 3;
pub const message_type_MESSAGE_TYPE_MAX_VALID_USER_TYPE: message_type = 3;
pub const message_type_MESSAGE_TYPE_PIVOT_DATA: message_type = 1000;
pub type message_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message {
    pub type_: message_type,
    pub data: slice,
}
#[test]
fn bindgen_test_layout_message() {
    const UNINIT: ::std::mem::MaybeUninit<message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<message>(),
        24usize,
        concat!("Size of: ", stringify!(message))
    );
    assert_eq!(
        ::std::mem::align_of::<message>(),
        8usize,
        concat!("Alignment of ", stringify!(message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(message),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(message),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct merge_accumulator {
    _unused: [u8; 0],
}
pub type key_compare_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cfg: *const data_config,
        key1: slice,
        key2: slice,
    ) -> ::std::os::raw::c_int,
>;
pub type key_hash_fn = ::std::option::Option<
    unsafe extern "C" fn(
        input: *const ::std::os::raw::c_void,
        length: usize,
        seed: uint32,
    ) -> uint32,
>;
pub type merge_tuple_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cfg: *const data_config,
        key: slice,
        old_message: message,
        new_message: *mut merge_accumulator,
    ) -> ::std::os::raw::c_int,
>;
pub type merge_tuple_final_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cfg: *const data_config,
        key: slice,
        oldest_message: *mut merge_accumulator,
    ) -> ::std::os::raw::c_int,
>;
pub type key_to_str_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cfg: *const data_config,
        key: slice,
        str_: *mut ::std::os::raw::c_char,
        max_len: uint64,
    ),
>;
pub type message_to_str_fn = ::std::option::Option<
    unsafe extern "C" fn(
        cfg: *const data_config,
        msg: message,
        str_: *mut ::std::os::raw::c_char,
        max_len: uint64,
    ),
>;
#[repr(C)]
#[derive(Debug)]
pub struct data_config {
    pub max_key_size: uint64,
    pub key_compare: key_compare_fn,
    pub key_hash: key_hash_fn,
    pub merge_tuples: merge_tuple_fn,
    pub merge_tuples_final: merge_tuple_final_fn,
    pub key_to_string: key_to_str_fn,
    pub message_to_string: message_to_str_fn,
}
#[test]
fn bindgen_test_layout_data_config() {
    const UNINIT: ::std::mem::MaybeUninit<data_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<data_config>(),
        56usize,
        concat!("Size of: ", stringify!(data_config))
    );
    assert_eq!(
        ::std::mem::align_of::<data_config>(),
        8usize,
        concat!("Alignment of ", stringify!(data_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_key_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(max_key_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_compare) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(key_compare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_hash) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(key_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_tuples) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(merge_tuples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_tuples_final) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(merge_tuples_final)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_to_string) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(key_to_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_to_string) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(data_config),
            "::",
            stringify!(message_to_string)
        )
    );
}
extern "C" {
    pub fn splinterdb_get_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct splinterdb_config {
    pub filename: *const ::std::os::raw::c_char,
    pub cache_size: uint64,
    pub disk_size: uint64,
    pub data_cfg: *mut data_config,
    pub heap_handle: *mut ::std::os::raw::c_void,
    pub heap_id: *mut ::std::os::raw::c_void,
    pub page_size: uint64,
    pub extent_size: uint64,
    pub io_flags: ::std::os::raw::c_int,
    pub io_perms: uint32,
    pub io_async_queue_depth: uint64,
    pub cache_use_stats: bool_,
    pub cache_logfile: *const ::std::os::raw::c_char,
    pub btree_rough_count_height: uint64,
    pub filter_remainder_size: uint64,
    pub filter_index_size: uint64,
    pub use_log: bool_,
    pub memtable_capacity: uint64,
    pub fanout: uint64,
    pub max_branches_per_node: uint64,
    pub use_stats: uint64,
    pub reclaim_threshold: uint64,
}
#[test]
fn bindgen_test_layout_splinterdb_config() {
    const UNINIT: ::std::mem::MaybeUninit<splinterdb_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<splinterdb_config>(),
        168usize,
        concat!("Size of: ", stringify!(splinterdb_config))
    );
    assert_eq!(
        ::std::mem::align_of::<splinterdb_config>(),
        8usize,
        concat!("Alignment of ", stringify!(splinterdb_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(cache_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disk_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(disk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_cfg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(data_cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap_handle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(heap_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(heap_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(extent_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(io_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_perms) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(io_perms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_async_queue_depth) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(io_async_queue_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_use_stats) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(cache_use_stats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_logfile) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(cache_logfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).btree_rough_count_height) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(btree_rough_count_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_remainder_size) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(filter_remainder_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_index_size) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(filter_index_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_log) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(use_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memtable_capacity) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(memtable_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fanout) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(fanout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_branches_per_node) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(max_branches_per_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_stats) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(use_stats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reclaim_threshold) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_config),
            "::",
            stringify!(reclaim_threshold)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct splinterdb {
    _unused: [u8; 0],
}
extern "C" {
    pub fn splinterdb_create(
        cfg: *const splinterdb_config,
        kvs: *mut *mut splinterdb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_open(
        cfg: *const splinterdb_config,
        kvs: *mut *mut splinterdb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_close(kvs: *mut *mut splinterdb);
}
extern "C" {
    pub fn splinterdb_register_thread(kvs: *mut splinterdb);
}
extern "C" {
    pub fn splinterdb_deregister_thread(kvs: *mut splinterdb);
}
extern "C" {
    pub fn splinterdb_insert(
        kvsb: *const splinterdb,
        key: slice,
        value: slice,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_delete(kvsb: *const splinterdb, key: slice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_update(
        kvsb: *const splinterdb,
        key: slice,
        delta: slice,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug)]
pub struct splinterdb_lookup_result {
    pub opaque: [::std::os::raw::c_char; 48usize],
}
#[test]
fn bindgen_test_layout_splinterdb_lookup_result() {
    const UNINIT: ::std::mem::MaybeUninit<splinterdb_lookup_result> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<splinterdb_lookup_result>(),
        48usize,
        concat!("Size of: ", stringify!(splinterdb_lookup_result))
    );
    assert_eq!(
        ::std::mem::align_of::<splinterdb_lookup_result>(),
        8usize,
        concat!("Alignment of ", stringify!(splinterdb_lookup_result))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(splinterdb_lookup_result),
            "::",
            stringify!(opaque)
        )
    );
}
extern "C" {
    pub fn splinterdb_lookup_result_init(
        kvs: *const splinterdb,
        result: *mut splinterdb_lookup_result,
        buffer_len: uint64,
        buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn splinterdb_lookup_result_deinit(result: *mut splinterdb_lookup_result);
}
extern "C" {
    pub fn splinterdb_lookup_found(result: *const splinterdb_lookup_result) -> bool_;
}
extern "C" {
    pub fn splinterdb_lookup_result_value(
        result: *const splinterdb_lookup_result,
        value: *mut slice,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_lookup(
        kvs: *const splinterdb,
        key: slice,
        result: *mut splinterdb_lookup_result,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct splinterdb_iterator {
    _unused: [u8; 0],
}
extern "C" {
    pub fn splinterdb_iterator_init(
        kvs: *const splinterdb,
        iter: *mut *mut splinterdb_iterator,
        start_key: slice,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_iterator_deinit(iter: *mut splinterdb_iterator);
}
extern "C" {
    pub fn splinterdb_iterator_valid(iter: *mut splinterdb_iterator) -> bool_;
}
extern "C" {
    pub fn splinterdb_iterator_next(iter: *mut splinterdb_iterator);
}
extern "C" {
    pub fn splinterdb_iterator_get_current(
        iter: *mut splinterdb_iterator,
        key: *mut slice,
        value: *mut slice,
    );
}
extern "C" {
    pub fn splinterdb_iterator_status(iter: *const splinterdb_iterator) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn splinterdb_stats_print_insertion(kvs: *const splinterdb);
}
extern "C" {
    pub fn splinterdb_stats_print_lookup(kvs: *const splinterdb);
}
extern "C" {
    pub fn splinterdb_stats_reset(kvs: *mut splinterdb);
}
extern "C" {
    pub fn default_data_config_init(max_key_size: uint64, out_cfg: *mut data_config);
}
